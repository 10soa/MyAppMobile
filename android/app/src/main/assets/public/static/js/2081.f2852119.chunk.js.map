{"version":3,"file":"static/js/2081.f2852119.chunk.js","mappings":"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","sources":["../node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const data = options.data;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: !encoding && data.indexOf(',') >= 0 ? data.split(',')[1] : data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        // const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (occupiedEntry !== undefined) {\n            data = occupiedEntry.content + data;\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const names = entries.map(e => {\n            return e.substring(path.length + 1);\n        });\n        return { files: names };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        return this._copy(options, true);\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return;\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                // Write the file to the new location\n                await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename}`,\n                        to: `${to}/${filename}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","arguments","DB_VERSION","DB_NAME","_writeCmds","undefined","this","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","cmd","args","readFlag","indexOf","initDb","then","conn","store","transaction","objectStore","req","indexName","directory","uriPath","cleanedUriPath","replace","fsPath","tx","clear","options","getPath","dbRequest","entry","Error","data","content","doRecursive","recursive","occupiedEntry","type","encoding","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","now","Date","pathObj","folder","size","ctime","mtime","uri","dbIndexRequest","IDBKeyRange","only","depth","match","parentEntry","fullPath","readdir","readDirResult","files","entryPath","stat","deleteFile","rmdir","entries","names","map","e","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","fromObj","updateTime","readFile","file","writeFile","contents","filename","event","db","target","oldVersion","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","WebPlugin","_debug"],"sourceRoot":""}